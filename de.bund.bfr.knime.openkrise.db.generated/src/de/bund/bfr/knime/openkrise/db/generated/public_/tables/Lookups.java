/**
 * This class is generated by jOOQ
 */
package de.bund.bfr.knime.openkrise.db.generated.public_.tables;


import de.bund.bfr.knime.openkrise.db.generated.public_.Keys;
import de.bund.bfr.knime.openkrise.db.generated.public_.Public;
import de.bund.bfr.knime.openkrise.db.generated.public_.tables.records.LookupsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lookups extends TableImpl<LookupsRecord> {

	private static final long serialVersionUID = -786591673;

	/**
	 * The reference instance of <code>PUBLIC.LookUps</code>
	 */
	public static final Lookups LOOKUPS = new Lookups();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<LookupsRecord> getRecordType() {
		return LookupsRecord.class;
	}

	/**
	 * The column <code>PUBLIC.LookUps.ID</code>.
	 */
	public final TableField<LookupsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.LookUps.type</code>.
	 */
	public final TableField<LookupsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * The column <code>PUBLIC.LookUps.value</code>.
	 */
	public final TableField<LookupsRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

	/**
	 * Create a <code>PUBLIC.LookUps</code> table reference
	 */
	public Lookups() {
		this("LookUps", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.LookUps</code> table reference
	 */
	public Lookups(String alias) {
		this(alias, LOOKUPS);
	}

	private Lookups(String alias, Table<LookupsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Lookups(String alias, Table<LookupsRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<LookupsRecord, Integer> getIdentity() {
		return Keys.IDENTITY_LOOKUPS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<LookupsRecord> getPrimaryKey() {
		return Keys.SYS_PK_10944;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<LookupsRecord>> getKeys() {
		return Arrays.<UniqueKey<LookupsRecord>>asList(Keys.SYS_PK_10944);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Lookups as(String alias) {
		return new Lookups(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Lookups rename(String name) {
		return new Lookups(name, null);
	}
}
