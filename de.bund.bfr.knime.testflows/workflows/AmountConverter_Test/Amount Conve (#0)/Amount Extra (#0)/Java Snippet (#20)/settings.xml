<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="scriptImports" type="xstring" value="// Your custom imports:%%00010import java.util.regex.Matcher;%%00010import java.util.regex.Pattern;%%00010import java.util.Map;%%00010import java.util.HashMap;%%00010import org.knime.core.node.NodeLogger;"/>
<entry key="scriptFields" type="xstring" value="// Your custom variables:%%00010static NodeLogger nodeLogger = NodeLogger.getLogger(&quot;AmountExtractor&quot;);%%00010%%00010private static enum NumberFormat {%%00010%%00009DP_DOT, DP_COMMA, DIGITS_ONLY%%00010}%%00010%%00009%%00010private String NU_REGEX_CAPPED = null;%%00010private String NUxNU_REGEX_CAPPED = null;%%00010private Pattern NU_PATTERN = null;%%00010private Pattern NUxNU_PATTERN = null;%%00010%%00010private static final NumberFormat NUMBERFORMAT_DEFAULT = NumberFormat.DP_COMMA;%%00010%%00010private static final String WORD = &quot;\\p{L}+(\\.)?&quot;; // all unicode letters + an optional . suffix%%00010private static final String UNIT = WORD;%%00010%%00010private static final int RANK_UNKNOWN = Integer.MAX_VALUE;%%00010private static final int RANK_TOP = 1;%%00010%%00010private static final String UNIT_KEY = &quot;unit&quot;;%%00010private static final String AMOUNT_KEY = &quot;amount&quot;;%%00010private static final String REGEX_START = &quot;^\\s*&quot;;%%00010private static final String REGEX_END = &quot;\\s*$&quot;;%%00010private static final String REGEX_NF_DIGITS_ONLY = &quot;\\d+&quot;;%%00010private static final String REGEX_NF_DP_COMMA_UNSPECIFIC = &quot;((\\d+|([1-9]\\d{0,2})(\\.\\d{3})*)(,\\d+)?)&quot;; //  e.g. 10.000.000,458%%00010private static final String REGEX_NF_DP_DOT_UNSPECIFIC = &quot;((\\d+|([1-9]\\d{0,2})(,\\d{3})*)(\\.\\d+)?)&quot;; // e.g. 10,000,000.458%%00010private static final String REGEX_NUMBER = &quot;(&quot; + REGEX_NF_DIGITS_ONLY + &quot;|&quot; + REGEX_NF_DP_COMMA_UNSPECIFIC + &quot;|&quot; + REGEX_NF_DP_DOT_UNSPECIFIC + &quot;)&quot;;%%00010private static final String REGEX_NF_DP_COMMA_SPECIFIC = &quot;^((.*(\\.\\d+){2,}.*)|(.*\\.\\d+,.*)|(.*,(\\d{1,2}|\\d{4}))|(0,\\d+))$&quot;; // e.g. 10.000.345 or 0,456 or 10.349,5%%00010private static final String REGEX_NF_DP_DOT_SPECIFIC = &quot;^((.*(,\\d+){2,}.*)|(.*,\\d+\\..*)|(.*\\.(\\d{1,2}|\\d{4}))|(0\\.\\d+))$&quot;; // e.g. 10,000,345 or 0.456 or 10,349.5%%00010%%00010%%00010private Map&lt;Integer, String&gt; RU_REGEX_MAP;%%00010%%00010private boolean initUnits(String UNITS_WITH_RANK) throws Abort  {%%00010%%00009final String ALLOWEDMULTIPLIERS = &quot;(?i)(x|\\*|a|à|á|À|Á)&quot;;%%00010%%00009if(!initRankedUnits(UNITS_WITH_RANK)) return false;%%00010%%00009%%00010%%00009final String AMOUNT = REGEX_NUMBER; // &quot;\\d+([.,]\\d+)?&quot;;%%00010%%00009final String GARBAGE = &quot;(\\s+&quot; + WORD + &quot;)*&quot;;%%00010%%00010%%00009final String NU_REGEX = getLabeledRegex(AMOUNT,AMOUNT_KEY) + &quot;\\s*(&quot; + getLabeledRegex(UNIT, UNIT_KEY) + GARBAGE + &quot;)?&quot;;%%00010%%00009NU_REGEX_CAPPED = getCappedRegex(NU_REGEX); %%00010%%00009NUxNU_REGEX_CAPPED = getCappedRegex(%%00010     %%00009getLabeledRegex(AMOUNT,AMOUNT_KEY) + &quot;\\s*(&quot; + getLabeledRegex(UNIT, UNIT_KEY) + GARBAGE + &quot;\\s+)?&quot; + %%00010     %%00009&quot;\\s*&quot; + ALLOWEDMULTIPLIERS + &quot;\\s*&quot; + %%00010%%00009%%00009getLabeledRegex(AMOUNT,AMOUNT_KEY + &quot;2&quot;) + &quot;\\s*(&quot; + getLabeledRegex(UNIT, UNIT_KEY + &quot;2&quot;) + GARBAGE +&quot;)?&quot;);  %%00010%%00010%%00009NU_PATTERN = Pattern.compile(NU_REGEX_CAPPED);%%00010%%00009NUxNU_PATTERN = Pattern.compile(NUxNU_REGEX_CAPPED);%%00010%%00009%%00010%%00009return true;%%00010}%%00010%%00010private String getLabeledRegex(String REGEX, String name) {%%00010%%00009return &quot;(?&lt;&quot; + name + &quot;&gt;&quot; + REGEX + &quot;)&quot;;%%00010}%%00010%%00010private String getCappedRegex(String REGEX) {%%00010%%00009return REGEX_START + REGEX + REGEX_END;%%00010}%%00010%%00010private boolean initRankedUnits(final String RANKED_UNITS) throws Abort {%%00010%%00009final String RU_REGEX = UNIT + &quot;:\\d+&quot;;%%00010%%00009%%00010%%00009if(!RANKED_UNITS.matches(&quot;^&quot; + RU_REGEX + &quot;(\\|&quot; + RU_REGEX + &quot;)*$&quot;)) {%%00010%%00009%%00009throw new Abort(&quot;RankedUnits String is not valid.&quot;);%%00010%%00009%%00009// nodeLogger.warn(&quot;RankedUnits String is not valid.&quot;);%%00010%%00009%%00009// return false;%%00010%%00009}%%00010     %%00010     RU_REGEX_MAP = new HashMap&lt;&gt;();%%00010     %%00010%%00009for(String rankedUnit: RANKED_UNITS.split(&quot;\\|&quot;)) {%%00010%%00009%%00009String[] ruA = rankedUnit.split(&quot;:&quot;);%%00010%%00009%%00009int rank = Integer.parseInt(ruA[1]);%%00010%%00009%%00009if(!RU_REGEX_MAP.containsKey(rank)) RU_REGEX_MAP.put(rank, ruA[0]);%%00010%%00009%%00009else RU_REGEX_MAP.put(rank, RU_REGEX_MAP.get(rank) + &quot;|&quot; + ruA[0]);%%00010%%00009}%%00010%%00009for(Integer key: RU_REGEX_MAP.keySet()) {%%00010%%00009%%00009RU_REGEX_MAP.put(key, &quot;(?i)(&quot; + RU_REGEX_MAP.get(key) + &quot;)&quot;);%%00010%%00009}%%00010%%00009return true;%%00010}%%00010%%00010private int getRank(String unit) {%%00010%%00009for(Map.Entry&lt;Integer, String&gt; entry : RU_REGEX_MAP.entrySet()) {%%00010%%00009%%00009if(unit.matches(entry.getValue())) return entry.getKey();%%00010%%00009}%%00010%%00009return RANK_UNKNOWN;%%00010}%%00010%%00010private class ParsedNumber {%%00010%%00009private Double value;%%00010%%00009private String comment;%%00010%%00009ParsedNumber(Double value, String comment) {%%00010%%00009%%00009this.value = value;%%00010%%00009%%00009this.comment = comment; %%00010%%00009}%%00010%%00009ParsedNumber(Double value) { this(value, null); }%%00010}%%00010private class ParsedNumbers {%%00010%%00009private Double value1;%%00010%%00009private Double value2;%%00010%%00009private String comment;%%00010%%00009ParsedNumbers(Double value1, Double value2, String comment) {%%00010%%00009%%00009this.value1 = value1;%%00010%%00009%%00009this.value2 = value2;%%00010%%00009%%00009this.comment = comment; %%00010%%00009}%%00010%%00009%%00010%%00009ParsedNumbers(Double value1, Double value2) { this(value1, value2, null); }%%00010%%00009ParsedNumbers(Double value1, ParsedNumber value2) { this(value1, value2.value, value2.comment); }%%00010%%00009ParsedNumbers(ParsedNumber value1, Double value2) { this(value1.value, value2, value1.comment); }%%00010%%00009%%00010}%%00010%%00010private NumberFormat getNumberFormat(String value) {%%00010%%00009if(value.matches(REGEX_NF_DIGITS_ONLY)) {%%00010%%00009%%00009return NumberFormat.DIGITS_ONLY;%%00010%%00009} else if(value.matches(REGEX_NF_DP_COMMA_SPECIFIC)) {%%00010%%00009%%00009return NumberFormat.DP_COMMA;%%00010%%00009} else if(value.matches(REGEX_NF_DP_DOT_SPECIFIC)) {%%00010%%00009%%00009return NumberFormat.DP_DOT;%%00010%%00009}%%00010%%00009return null;%%00010}%%00010%%00010private String convertNumberFormatToString(NumberFormat nf) {%%00010%%00009switch(nf) {%%00010%%00009%%00009case DP_COMMA: return &quot;\&quot;,\&quot; as decimal point&quot;;%%00010%%00009%%00009case DP_DOT: return &quot;\&quot;.\&quot; as decimal point&quot;;%%00010%%00009%%00009case DIGITS_ONLY: return &quot;only digits&quot;;%%00010%%00009%%00009default: return &quot;&quot;;%%00010%%00009}%%00010}%%00010%%00010private ParsedNumber parseValue(String value, NumberFormat defaultNumberFormat) {%%00010%%00009NumberFormat nf = getNumberFormat(value);%%00010%%00009if(nf!=null) return new ParsedNumber(convertNumberToDouble(value, nf));%%00010%%00009// the format cannot be retrieved from the value%%00010%%00009if(defaultNumberFormat!=null &amp;&amp; defaultNumberFormat!=NumberFormat.DIGITS_ONLY) return new ParsedNumber(convertNumberToDouble(value, defaultNumberFormat));%%00010%%00010%%00009// try to estimate format from the value%%00010%%00009nf = getNumberFormatEstimate(value);%%00010%%00009if(nf!=null) return new ParsedNumber(convertNumberToDouble(value, nf), &quot;Number was parsed with &quot; + convertNumberFormatToString(nf) + &quot; suspect.&quot;);%%00010%%00010%%00009// use the default DE, because only GB is using the EN format all other european countries not  %%00010%%00009return new ParsedNumber(convertNumberToDouble(value,NUMBERFORMAT_DEFAULT), &quot;Number was parsed with &quot; + convertNumberFormatToString(NUMBERFORMAT_DEFAULT) + &quot; assumption.&quot;);%%00010}%%00010%%00010private Double convertNumberToDouble(String value, NumberFormat nf) {%%00010%%00009switch(nf) {%%00010%%00009%%00009case DIGITS_ONLY: return Double.parseDouble(value);%%00010%%00009%%00009case DP_COMMA: return convertDENumberToDouble(value);%%00010%%00009%%00009case DP_DOT: return convertENNumberToDouble(value);%%00010%%00009%%00009default:%%00010%%00009%%00009  return null; %%00010%%00009}%%00010}%%00010private ParsedNumbers parseValues(String value1, String value2) {%%00010%%00009NumberFormat nf1 = getNumberFormat(value1);%%00010%%00009NumberFormat nf2 = getNumberFormat(value2);%%00010%%00010     if(nf1!=null) {%%00010     %%00009if(nf2!=null) return new ParsedNumbers(convertNumberToDouble(value1,nf1), convertNumberToDouble(value2,nf2));%%00010     %%00009else return new ParsedNumbers(convertNumberToDouble(value1,nf1), parseValue(value2,nf1));%%00010     } else if(nf2!=null) {%%00010     %%00009return new ParsedNumbers(parseValue(value1,nf2), convertNumberToDouble(value2,nf2));%%00010     } else {%%00010     %%00009nf1 = getNumberFormatEstimate(value1);%%00010     %%00009nf2 = getNumberFormatEstimate(value2);%%00010     %%00009if((nf1==null &amp;&amp; nf2==null) ||%%00010     %%00009   (nf1!=null &amp;&amp; nf2!=null &amp;&amp; nf1!=nf2) ) {%%00010     %%00009   %%00009// numberformats estimates dont exist or they are contradictory%%00010     %%00009   %%00009// fall back to DE assumption %%00010     %%00009%%00009return new ParsedNumbers(convertNumberToDouble(value1,NUMBERFORMAT_DEFAULT), convertNumberToDouble(value2,NUMBERFORMAT_DEFAULT), &quot;Numbers were parsed with &quot; + convertNumberFormatToString(NUMBERFORMAT_DEFAULT) + &quot; assumption.&quot;);%%00010     %%00009} else if(nf1!=null) {%%00010     %%00009%%00009// numberformat estimate only exist for value1, take it%%00010     %%00009%%00009return new ParsedNumbers(convertNumberToDouble(value1,nf1), convertNumberToDouble(value2,nf1), &quot;Numbers were parsed with &quot; + convertNumberFormatToString(nf1) + &quot; suspect.&quot;);%%00010     %%00009} else {%%00010     %%00009%%00009// numberformat estimate only exist for value2, take it%%00010     %%00009%%00009return new ParsedNumbers(convertNumberToDouble(value1,nf2), convertNumberToDouble(value2,nf2), &quot;Numbers were parsed with &quot; + convertNumberFormatToString(nf2) + &quot; suspect.&quot;);%%00010     %%00009}%%00010     }%%00010}%%00010%%00010private double convertDENumberToDouble(String unit) {%%00010%%00009return Double.parseDouble(unit.replaceAll(&quot;\\.&quot;, &quot;&quot;).replace(&quot;,&quot;, &quot;.&quot;));%%00010}%%00010private double convertENNumberToDouble(String unit) {%%00010%%00009return Double.parseDouble(unit.replaceAll(&quot;,&quot;, &quot;&quot;));%%00010}%%00010%%00010private NumberFormat getNumberFormatEstimate(String unit) {%%00010%%00009  final String REGEX_NF_DP_COMMA_GUESS = &quot;.*\\.\\d{2}0$&quot;;%%00010%%00009  final String REGEX_NF_DP_DOT_GUESS = &quot;.*,\\d{2}0$&quot;;%%00010%%00009  if(unit.matches( REGEX_NF_DP_COMMA_GUESS)) {%%00010%%00009  %%00009return NumberFormat.DP_COMMA;%%00010%%00009  } else if(unit.matches( REGEX_NF_DP_DOT_GUESS)) {%%00010%%00009  %%00009return NumberFormat.DP_DOT;%%00010%%00009  } else {%%00010%%00009  %%00009return null;%%00010%%00009  }%%00010}%%00010%%00010%%00010%%00010"/>
<entry key="scriptBody" type="xstring" value="// Enter your code here:%%00010// Initialize%%00010if(NU_REGEX_CAPPED==null) if(ROWINDEX==0) initUnits(v_UnitWithRank.toLowerCase()); %%00010%%00010if(NU_REGEX_CAPPED==null) {%%00010%%00009return;%%00010}%%00010%%00010if (c_Amount==null) return;%%00010// Number + unit%%00010if (c_Amount.matches(NU_REGEX_CAPPED)) {%%00010%%00009Matcher matcher = NU_PATTERN.matcher(c_Amount);%%00010    %%00009matcher.find();%%00010%%00009//out_Num = Double.valueOf(matcher.group(AMOUNT_KEY));%%00010%%00009ParsedNumber pN = parseValue(matcher.group(AMOUNT_KEY), null);%%00010%%00009if(pN.value==null) {%%00010%%00009%%00009nodeLogger.warn(&quot;parseValues returned null value.&quot;);%%00010%%00009%%00009return;%%00010%%00009}%%00010%%00009out_Num = pN.value;%%00010%%00009out_Unit = matcher.group(UNIT_KEY);%%00010%%00009out_Comment = pN.comment;%%00010} %%00010%%00010// Number + (unit + garbage)? + multiplier + number + (unit + garbage)?%%00010else if (c_Amount.matches(NUxNU_REGEX_CAPPED)) {%%00010%%00009Matcher matcher = NUxNU_PATTERN.matcher(c_Amount);%%00010    %%00009matcher.find();%%00010    %%00009ParsedNumbers pN = parseValues(matcher.group(AMOUNT_KEY),matcher.group(AMOUNT_KEY + &quot;2&quot;));%%00010    %%00009//double amount1 = Double.parseDouble(matcher.group(AMOUNT_KEY));%%00010    %%00009//double amount2 = Double.parseDouble(matcher.group(AMOUNT_KEY + &quot;2&quot;));%%00010    %%00009if(pN.value1==null || pN.value2==null) {%%00010    %%00009%%00009nodeLogger.warn(&quot;parseValues returned null value.&quot;);%%00010    %%00009%%00009return;%%00010    %%00009}%%00010    %%00009%%00010    %%00009String unit1 = matcher.group(UNIT_KEY);%%00010    %%00009String unit2 = matcher.group(UNIT_KEY + &quot;2&quot;);%%00010    %%00009String unitRef = null;%%00010    %%00009String comment = null;%%00010    %%00009%%00010%%00009if(unit1!=null &amp;&amp; unit2!=null) {%%00010%%00009%%00009// 2 units are given%%00010%%00009%%00009// decide which unit to take%%00010%%00009%%00009int rank1 = getRank(unit1);%%00010%%00009%%00009int rank2 = getRank(unit2);%%00010%%00009%%00009%%00010%%00009%%00009if(rank1==rank2) {%%00010%%00009%%00009%%00009// equal ranks%%00010%%00009%%00009%%00009unitRef = unit2;%%00010%%00009%%00009%%00009comment = &quot;Units have same rank. Unit 2 was choosen as reference unit.&quot;;%%00010%%00009%%00009}%%00010%%00009%%00009else if(rank1!=RANK_UNKNOWN &amp;&amp; rank2!=RANK_UNKNOWN) {%%00010%%00009       // different known ranks%%00010%%00009%%00009  unitRef = (rank1&lt;rank2 ? unit1 : unit2);%%00010%%00009%%00009} %%00010%%00009%%00009else if(rank2&lt;rank1) {%%00010%%00009%%00009%%00009// only unit2 is known%%00010%%00009%%00009%%00009unitRef = unit2;%%00010%%00009%%00009%%00009if(rank1==RANK_UNKNOWN &amp;&amp; rank2&gt;RANK_TOP) comment = &quot;Unit 2 was choosen as reference, but the rank of unknown unit 1 might be better.&quot;;%%00010%%00009%%00009}%%00010%%00009%%00009else  {%%00010%%00009%%00009%%00009// only unit 1 is known%%00010%%00009%%00009%%00009unitRef = unit1;%%00010%%00009%%00009%%00009if(rank2==RANK_UNKNOWN &amp;&amp; rank1&gt;RANK_TOP) comment = &quot;Unit 1 was choosen as reference, but the rank of unknown unit 2 might be better.&quot;;%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009else if (unit1==null &amp;&amp; unit2==null) {%%00010%%00009%%00009// no unit was supplied%%00010%%00009%%00009comment = &quot;Unit is missing.&quot;;%%00010%%00009} else {%%00010%%00009%%00009// only one unit is given%%00010%%00009%%00009unitRef = (unit1!=null ? unit1 : unit2);%%00010%%00009}%%00010%%00010    %%00009//int m = Integer.valueOf(matcher.group(&quot;multiplier&quot;));%%00010%%00009out_Num =  pN.value1 * pN.value2;  //amount1 * amount2;//Double.valueOf(matcher.group(&quot;amount&quot;))*m;%%00010%%00009out_Unit = unitRef; //matcher.group(&quot;unit&quot;);%%00010%%00009//comment = (comment==null?pN.comment : (pN.comment!=null?pN.comment + &quot; .&quot; : &quot;&quot;) + comment);%%00010%%00009out_Comment = (comment==null ? pN.comment : (pN.comment!=null ? pN.comment + &quot; .&quot; : &quot;&quot;) + comment);%%00010}%%00010else {%%00010    %%00009out_Num = null;%%00010%%00009out_Unit = null;%%00010}%%00010%%00010if(out_Unit!=null &amp;&amp; getRank(out_Unit)==RANK_UNKNOWN) {%%00010     out_Comment = (out_Comment==null ? &quot;&quot; : out_Comment + &quot; &quot;) + &quot;Unit is unknown.&quot;;%%00010}"/>
<config key="jarFiles">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="outCols">
<entry key="array-size" type="xint" value="3"/>
<config key="0">
<entry key="Name" type="xstring" value="ExtractedNumber"/>
<entry key="JavaName" type="xstring" value="out_Num"/>
<entry key="JavaType" type="xstring" value="java.lang.Double"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.DoubleCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.DoubleCell$DoubleCellFactory.create(class java.lang.Double)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="1">
<entry key="Name" type="xstring" value="ExtractedUnit"/>
<entry key="JavaName" type="xstring" value="out_Unit"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="2">
<entry key="Name" type="xstring" value="ExtractionComment"/>
<entry key="JavaName" type="xstring" value="out_Comment"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
</config>
<config key="outVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="inCols">
<entry key="array-size" type="xint" value="1"/>
<config key="0">
<entry key="Name" type="xstring" value="Amount"/>
<entry key="JavaName" type="xstring" value="c_Amount"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.java.SimpleDataCellToJavaConverterFactory(StringValue,class java.lang.String,String)"/>
</config>
</config>
<config key="inVars">
<entry key="array-size" type="xint" value="1"/>
<config key="0">
<entry key="Name" type="xstring" value="UnitWithRank"/>
<entry key="JavaName" type="xstring" value="v_UnitWithRank"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<entry key="Type" type="xstring" value="STRING"/>
</config>
</config>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="runOnExecute" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Extract Number, Units"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="761"/>
<entry key="y-coordinate" type="xint" value="579"/>
<entry key="width" type="xint" value="118"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.base.node.jsnippet.JavaSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="Java Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Java Snippet Nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.jsnippets"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.5.3.v201804031105"/>
<entry key="node-feature-name" type="xstring" value="KNIME Core"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.base.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.5.3.v201804041546"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Java Snippet"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 67, Cols: 6"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="1f4f196c-d3f6-4e6a-b661-828ee0a6784b"/>
</config>
</config>
